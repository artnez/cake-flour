{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Flour","tagline":"Bake better Cakefiles","body":"Flour\r\n==========\r\n\r\n**Flour** is a set of simple build tools for your Cakefiles.\r\n\r\n[Changelog](#changelog)\r\n\r\n![image](http://i.imgur.com/yIxF9.jpg)\r\n\r\n## Usage\r\n\r\nAdd `flour` and your required pre-processors/compilers to your `package.json`:\r\n\r\n    {\r\n      \"name\": \"dancingrobot\",\r\n      ...\r\n      \"dependencies\": {\r\n        \"flour\": \"\",\r\n        \"uglify-js\": \"\",\r\n        \"coffee-script\": \"\"\r\n      },\r\n      ...\r\n    }\r\n\r\nThen run `npm install`, and `require 'flour'` at the top of your Cakefile. A few methods are available in the global scope.\r\n\r\nThis is what a typical Cakefile could look like:\r\n\r\n    require 'flour'\r\n\r\n    task 'build:coffee', ->\r\n        compile 'coffee/app.coffee', 'js/app.js'\r\n\r\n    task 'build:less', ->\r\n        compile 'less/main.less', 'css/main.css'\r\n\r\n    task 'build:plugins', ->\r\n        bundle [\r\n            'vendor/underscore.js'\r\n            'vendor/hogan.js'\r\n            'vendor/backbone.js'\r\n        ], 'js/plugins.js'\r\n\r\n    task 'build', ->\r\n        invoke 'build:plugins'\r\n        invoke 'build:coffee'\r\n        invoke 'build:less\r\n\r\n    task 'watch', ->\r\n        invoke 'build:less'\r\n        invoke 'build:coffee'\r\n\r\n        watch 'less/*.less', -> invoke 'build:less'\r\n        watch 'coffee/app.coffee', -> invoke 'build:coffee'\r\n\r\n    task 'lint', 'Check javascript syntax', ->\r\n        lint 'js/feature.js'\r\n\r\n(if the global pollution hurts your feelings you can remove them with `flour.noConflict()`. That will bring the global object back to it's previous state)\r\n\r\nEach of these functions accepts either a file path or a list of files. Simple wildcard paths (`*.xxx`) are allowed. For example:\r\n\r\n    watch [\r\n        'less/main.less'\r\n        'less/reset.less'\r\n        'less/print.less'\r\n    ], -> invoke 'build:less'\r\n\r\nYou can also access the resulting output by passing a callback:\r\n\r\n    compile 'coffee/app.coffee', (output) ->\r\n        # do something with the compiled output\r\n        mail.send subject: 'Project file', to: 'grandma@hotmail.com', body: output\r\n\r\n    # verify the CoffeeScript compiler output\r\n    compile 'coffee/app.coffee', 'js/app.js', -> lint 'js/app.js'\r\n\r\n## Adapters\r\n\r\nThese are the current adapters and the required modules:\r\n\r\n### Compilers\r\n\r\n* CoffeeScript: `coffee-script`\r\n* LESS: `less`\r\n* Stylus: `stylus`\r\n\r\n### Minifiers\r\n\r\n* Javascript: `uglify-js`\r\n\r\n### Linters\r\n\r\n* Javascript: 'jshint'\r\n\r\nCreating new adapters is very easy, take a look at the `adapters/` folder for guidance.\r\n\r\n## Reference\r\n\r\n### Compile\r\n\r\nCompiles CoffeeScript, LESS or Stylus files:\r\n\r\n    compile(file, [destination], [callback])\r\n\r\n##### Usage\r\n\r\n    compile 'app.coffee', 'app.js'\r\n\r\n    compile 'cold.coffee', 'app.js', (output) ->\r\n        console.log 'Done!'\r\n\r\n    compile 'cold.coffee', (output) ->\r\n        console.log output.transform()\r\n\r\nYou can disable compression for LESS or Stylus with\r\n\r\n    flour.compilers.less.compress = false\r\n    flour.compilers.styl.compress = false\r\n\r\n### Bundle\r\n\r\nCompile, minify and join a set of files:\r\n\r\n    bundle(files, destination)\r\n\r\n##### Usage\r\n\r\n    // preservers the list order\r\n    bundle [\r\n        'lib/jquery.js'\r\n        'lib/underscore.js'\r\n        'lib/backbone.js'\r\n    ], 'js/bundle.js'\r\n\r\n    // system-dependent order\r\n    bundle 'js/*.js', 'js/all.js'\r\n\r\n### Watch\r\n\r\nWatch files for changes:\r\n\r\n    watch(files, action)\r\n\r\n##### Usage\r\n\r\n    watch 'src/app.coffee', ->\r\n        compile 'lib/app.js'\r\n\r\n    # best used with predefined tasks:\r\n\r\n    task 'build', ->\r\n        bundle '*.coffee', 'app.js'\r\n\r\n    task 'watch', ->\r\n        watch [\r\n            'modules.coffee'\r\n            'user.coffee'\r\n            'main.coffee'\r\n        ], ->\r\n            invoke 'build'\r\n\r\n    # or simply\r\n    task 'watch', ->\r\n        watch '*.coffee', -> invoke 'build'\r\n\r\n### Lint\r\n\r\nCheck file syntax (uses [JSHint](http://jshint.com)):\r\n\r\n    lint(file, [options], [globals]) # see http://www.jshint.com/options/\r\n\r\n#### Usage\r\n\r\n    task 'lint', ->\r\n\r\n        lint 'scripts/*.js'\r\n\r\n### Minify\r\n\r\nMinify files (currently only Javascript using [UglifyJS](https://github.com/mishoo/UglifyJS)):\r\n\r\n    minify(file, [destination], [callback])\r\n\r\n## Extensibility\r\n\r\nYou can add new minifiers and compilers to `flour`:\r\n\r\n    flour.minifiers['dumb'] = (file, cb) ->\r\n        file.read (code) ->\r\n            cb code.replace(/\\s*/, '')\r\n\r\n    flour.compilers['odd'] = (file, cb) ->\r\n        odd = require 'odd-lib'\r\n        file.read (code) ->\r\n            cb odd.compile code\r\n\r\n## Tips\r\n\r\n#### Disable the JS minifier during development\r\n\r\n    task 'watch', ->\r\n        flour.minifiers['js'] = null\r\n\r\n        watch 'scripts/*.coffee', -> invoke 'build'\r\n\r\n#### Pre-compile Hogan templates\r\n\r\n    flour.compilers['mustache'] = (file, cb) ->\r\n        hogan = require 'hogan.js'\r\n        file.read (code) ->\r\n            cb \"App.templates['#{file.base}']=${hogan.compile code, asString: true};\"\r\n\r\n    task 'build:templates', ->\r\n        bundle 'views/*.mustache', 'resources/views.js'\r\n\r\n## Why use flour?\r\n\r\nWhile Grunt, brewerjs, H5BP-build-script, Yeoman and other similar projects have the same (and some more advanced) capabilities, they are increasingly complex to setup.\r\n\r\nThe goal of Flour is to provide a small and simple API that caters for the most common build tasks, without requiring you to adjust your project structure, install command-line tools or create long configuration files.\r\n\r\n#### Changelog <a name=\"changelog\"></a>\r\n\r\n##### v0.4.0\r\n- tests!\r\n- fix file buffer bug\r\n- accept options for adapters, enables disabling compression for LESS and Stylus\r\n\r\n##### v0.3.3\r\n- bugfixes\r\n\r\n##### v0.3.2\r\n- add [node-hound](http://github.com/beefsack/node-hound) as a dependency for file watching\r\n- watch whole directory trees: `watch `src/`, -> invoke 'build' (listens for new files and deletes too)\r\n- fix error handlers leak\r\n\r\n##### v0.3.1\r\n- fix extension handling bug\r\n\r\n##### v0.3.0\r\n- flour doesn't install it's adapter dependencies anymore, it's up to you to add them to your project's `package.json`","google":"UA-21731259-4"}